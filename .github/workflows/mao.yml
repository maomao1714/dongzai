name: 栋仔主题编译优化版66

on:
  workflow_dispatch:
    inputs:
      compile_threads:
        description: '编译线程数'
        required: false
        default: '1'
        type: choice
        options:
          - '1'
          - '2'

env:
  REPO_URL: https://github.com/coolsnowwolf/lede
  BUILD_DIR: lede

jobs:
  build:
    runs-on: ubuntu-22.04
    timeout-minutes: 360

    steps:
    - name: 检查代码和配置
      uses: actions/checkout@v4

    - name: 初始磁盘空间检查
      timeout-minutes: 15
      run: |
        echo "=== 初始磁盘空间状态 ==="
        df -h
        echo "开始清理系统缓存..."
        sudo apt-get clean
        sudo rm -rf /usr/local/lib/android /usr/share/dotnet /opt/ghc 2>/dev/null || true
        sudo rm -rf /usr/local/lib/node_modules 2>/dev/null || true
        echo "=== 清理后磁盘空间 ==="
        df -h

    - name: 验证配置文件
      run: |
        if [ ! -f ".config" ]; then
          echo "❌ 错误：缺少配置文件 .config"
          exit 1
        fi
        echo "✅ 找到配置文件"
        echo "=== 配置文件前几行预览 ==="
        head -20 .config

    - name: 安装编译环境
      timeout-minutes: 10
      run: |
        echo "安装编译环境..."
        sudo apt-get update
        sudo apt-get install -y build-essential git libncurses5-dev libssl-dev python3 unzip wget curl rsync
        echo "✅ 环境安装完成"
        sudo apt-get clean
        sudo rm -rf /var/lib/apt/lists/*

    - name: 克隆源码
      timeout-minutes: 5
      run: |
        if [ -d "$BUILD_DIR" ]; then
          echo "删除已存在的 $BUILD_DIR 目录"
          rm -rf $BUILD_DIR
        fi
        echo "开始克隆源码..."
        git clone --depth=1 $REPO_URL $BUILD_DIR
        echo "✅ 源码克隆完成"
        df -h

    - name: 更新软件源
      timeout-minutes: 5
      run: |
        if [ ! -d "$BUILD_DIR" ]; then
          echo "❌ 错误：$BUILD_DIR 目录不存在"
          exit 1
        fi
        echo "开始更新软件源..."
        cd $BUILD_DIR
        ./scripts/feeds update -a
        ./scripts/feeds install -a
        echo "✅ 软件源更新完成"

    - name: 处理Node.js问题
      run: |
        if [ ! -d "$BUILD_DIR" ]; then
          echo "❌ 错误：$BUILD_DIR 目录不存在"
          exit 1
        fi
        echo "处理Node.js问题..."
        if [ -d "$BUILD_DIR/feeds/packages/lang/node" ]; then
          rm -rf "$BUILD_DIR/feeds/packages/lang/node"
        fi
        mkdir -p "$BUILD_DIR/feeds/packages/lang/node"
        echo "✅ Node.js处理完成"

    - name: 创建主题目录
      run: |
        mkdir -p "$BUILD_DIR/package/lean/dongzhai-theme/luci-theme-dongzhai/files/www/luci-static/dongzhai/css"
        echo "✅ 主题目录创建完成"

    - name: 创建主题Makefile
      run: |
        THEME_DIR="$BUILD_DIR/package/lean/dongzhai-theme/luci-theme-dongzhai"
        if [ ! -d "$THEME_DIR" ]; then
          echo "❌ 错误：主题目录不存在"
          exit 1
        fi
        
        cat > "$THEME_DIR/Makefile" << 'EOF'
include $(TOPDIR)/rules.mk

LUCI_TITLE:=栋仔主题
LUCI_DEPENDS:=
PKG_VERSION:=1.0
PKG_RELEASE:=1

include $(INCLUDE_DIR)/package.mk

define Package/luci-theme-dongzhai
  $(call Package/luci/webtemplate)
  TITLE:=栋仔主题
  DEPENDS:=+luci-compat
endef

define Package/luci-theme-dongzhai/description
  栋仔个性化主题
endef

define Build/Configure
endef

define Build/Compile
endef

define Package/luci-theme-dongzhai/install
	$(INSTALL_DIR) $(1)/www/luci-static/dongzhai
	[ -d ./files ] && $(CP) ./files/* $(1)/www/luci-static/dongzhai/
endef

$(eval $(call BuildPackage,luci-theme-dongzhai))
EOF
        echo "✅ 主题Makefile创建完成"

    - name: 创建主题CSS
      run: |
        CSS_DIR="$BUILD_DIR/package/lean/dongzhai-theme/luci-theme-dongzhai/files/www/luci-static/dongzhai/css"
        if [ ! -d "$CSS_DIR" ]; then
          echo "❌ 错误：CSS目录不存在"
          exit 1
        fi
        
        cat > "$CSS_DIR/style.css" << 'EOF'
/* 栋仔主题样式 */
.header .fill .brand {
    color: #ff6600;
    font-weight: bold;
    font-size: 18px;
}
.sidebar {
    background: #2c3e50;
}
.sidebar .nav > li > a {
    color: #ecf0f1;
}
.btn-primary {
    background-color: #ff6600;
    border-color: #ff6600;
}
EOF
        echo "✅ 主题CSS创建完成"

    - name: 应用配置
      timeout-minutes: 5
      run: |
        if [ ! -d "$BUILD_DIR" ]; then
          echo "❌ 错误：$BUILD_DIR 目录不存在"
          exit 1
        fi
        
        echo "=== 当前磁盘空间 ==="
        df -h
        
        echo "复制配置文件..."
        if [ -f ".config" ]; then
          cp .config "$BUILD_DIR/.config"
          echo "✅ 配置文件复制完成"
        else
          echo "⚠️ 无自定义配置文件，使用默认配置"
        fi
        
        echo "添加主题配置..."
        cd "$BUILD_DIR"
        
        # 使用scripts/config工具安全添加配置
        if [ -f "scripts/config" ]; then
          ./scripts/config --enable PACKAGE_luci-theme-dongzhai
          ./scripts/config --set-str DEFAULT_luci-theme-dongzhai y
        else
          # 备用方法：直接追加到.config
          echo "CONFIG_PACKAGE_luci-theme-dongzhai=y" >> .config
          echo "CONFIG_DEFAULT_luci-theme-dongzhai=y" >> .config
        fi
        
        echo "禁用Node.js相关包..."
        echo "# CONFIG_PACKAGE_node is not set" >> .config
        echo "# CONFIG_PACKAGE_node-npm is not set" >> .config
        echo "# CONFIG_PACKAGE_node-yarn is not set" >> .config
        
        echo "添加空间优化配置..."
        echo "# CONFIG_KERNEL_DEBUG_INFO is not set" >> .config
        echo "CONFIG_KERNEL_DEBUG_INFO_REDUCED=n" >> .config
        echo "# CONFIG_DEBUG is not set" >> .config
        echo "CONFIG_USE_STRIP=y" >> .config
        echo "CONFIG_USE_SSTRIP=n" >> .config
        echo "# CONFIG_BUILD_NLS is not set" >> .config
        echo "CONFIG_CLEAN_IPKG=y" >> .config
        echo "CONFIG_CCACHE=n" >> .config
        echo "# CONFIG_SDK is not set" >> .config
        
        echo "=== 配置预览（前50行）==="
        head -50 .config
        
        echo "应用配置..."
        if make defconfig; then
          echo "✅ 配置应用完成"
        else
          echo "❌ 配置应用失败，显示详细错误..."
          make defconfig V=s
          exit 1
        fi

    - name: 编译前深度清理
      timeout-minutes: 5
      run: |
        echo "=== 编译前磁盘空间 ==="
        df -h
        echo "执行深度清理..."
        
        # 更彻底的清理
        sudo apt-get autoremove -y
        sudo apt-get clean
        sudo rm -rf /var/cache/apt/archives/*
        sudo rm -rf /var/lib/apt/lists/*
        sudo rm -rf /tmp/*
        sudo rm -rf /var/tmp/*
        
        # 清理日志文件
        sudo find /var/log -type f -name "*.log" -exec truncate -s 0 {} \;
        
        # 移除.git目录释放更多空间
        if [ -d "$BUILD_DIR/.git" ]; then
          echo "移除.git目录节省空间..."
          rm -rf "$BUILD_DIR/.git"
        fi
        
        # 清理构建缓存
        if [ -d "$BUILD_DIR/tmp" ]; then
          rm -rf "$BUILD_DIR/tmp"
        fi
        
        echo "=== 清理后磁盘空间 ==="
        df -h

    - name: 下载软件包
      timeout-minutes: 20
      run: |
        if [ ! -d "$BUILD_DIR" ]; then
          echo "❌ 错误：$BUILD_DIR 目录不存在"
          exit 1
        fi
        
        THREADS=${{ github.event.inputs.compile_threads }}
        echo "开始下载软件包（使用 $THREADS 线程）..."
        echo "=== 下载前磁盘空间 ==="
        df -h
        
        cd "$BUILD_DIR"
        if make download -j$THREADS; then
          echo "✅ 软件包下载完成"
        else
          echo "⚠️ 下载失败，尝试单线程重试..."
          make download -j1 V=s
        fi
        
        echo "=== 下载后磁盘空间 ==="
        df -h

    - name: 编译固件
      timeout-minutes: 300
      run: |
        if [ ! -d "$BUILD_DIR" ]; then
          echo "❌ 错误：$BUILD_DIR 目录不存在"
          exit 1
        fi
        
        THREADS=${{ github.event.inputs.compile_threads }}
        echo "开始编译固件..."
        echo "=== 当前磁盘空间 ==="
        df -h
        
        cd "$BUILD_DIR"
        
        # 检查磁盘空间，如果不足则清理
        AVAILABLE_SPACE=$(df /dev/root --output=avail | tail -1)
        if [ "$AVAILABLE_SPACE" -lt 1048576 ]; then  # 小于1GB
          echo "⚠️ 磁盘空间不足，执行紧急清理..."
          make dirclean
          sudo rm -rf /tmp/*
          df -h
        fi
        
        echo "🔧 使用单线程编译确保稳定性..."
        if make -j1; then
          echo "🎉 编译成功！"
        else
          echo "⚠️ 编译失败，使用详细模式重试..."
          make -j1 V=s
        fi

    - name: 检查生成的文件
      run: |
        if [ ! -d "$BUILD_DIR" ]; then
          echo "❌ 错误：$BUILD_DIR 目录不存在"
          exit 1
        fi
        
        echo "🔍 查找生成的固件文件:"
        find "$BUILD_DIR/bin/targets/" -type f \( -name "*.bin" -o -name "*.img" -o -name "*.gz" \) 2>/dev/null | head -10
        
        echo "=== 最终磁盘空间 ==="
        df -h

    - name: 打包固件文件
      if: success()
      run: |
        echo "📦 打包固件文件..."
        cd $BUILD_DIR/bin/targets/
        if zip -r ../../firmware.zip . -i "*.bin" "*.img" "*.gz" 2>/dev/null; then
          echo "✅ 固件打包完成"
          ls -lh "$BUILD_DIR/firmware.zip"
        else
          echo "❌ 固件打包失败"
          # 尝试手动复制文件
          mkdir -p /tmp/firmware_backup
          find . -type f \( -name "*.bin" -o -name "*.img" -o -name "*.gz" \) -exec cp {} /tmp/firmware_backup/ \; 2>/dev/null || true
        fi

    - name: 上传固件
      if: success()
      uses: actions/upload-artifact@v4
      with:
        name: openwrt-firmware
        path: ${{ env.BUILD_DIR }}/firmware.zip
        retention-days: 30

    - name: 上传原始文件（备用）
      if: success()
      uses: actions/upload-artifact@v4
      with:
        name: firmware-backup
        path: ${{ env.BUILD_DIR }}/bin/targets/
        retention-days: 7

    - name: 完成提示
      run: |
        echo "🎊 编译流程全部完成！"
        echo "📥 下载链接将在Artifacts区域显示"
        echo "📦 主文件：openwrt-firmware.zip"
        echo "📁 备用文件：firmware-backup"
