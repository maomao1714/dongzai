name: OpenWrt编译完整依赖版

on:
  workflow_dispatch:
    inputs:
      compile_threads:
        description: '编译线程数'
        required: false
        default: '1'
        type: choice
        options:
          - '1'
          - '2'

env:
  REPO_URL: https://github.com/coolsnowwolf/lede
  BUILD_DIR: lede

jobs:
  build:
    runs-on: ubuntu-22.04
    timeout-minutes: 360

    steps:
    - name: 检查代码和配置
      uses: actions/checkout@v4

    - name: 磁盘空间优化
      run: |
        sudo swapoff -a
        sudo dd if=/dev/zero of=/swapfile bs=1G count=2
        sudo chmod 600 /swapfile
        sudo mkswap /swapfile
        sudo swapon /swapfile
        df -h
        free -h

    - name: 安装完整编译环境（包含Python2.7）
      run: |
        sudo apt-get update
        
        # 添加Python2.7支持
        sudo apt-get install -y software-properties-common
        sudo add-apt-repository -y ppa:deadsnakes/ppa
        sudo apt-get update
        
        # 安装完整的编译工具链
        sudo apt-get install -y \
          build-essential \
          git \
          libncurses5-dev \
          libncursesw5-dev \
          libssl-dev \
          python2.7 \
          python3 \
          python3-pip \
          unzip \
          wget \
          curl \
          gcc \
          g++ \
          binutils \
          patch \
          bzip2 \
          flex \
          make \
          autoconf \
          automake \
          gettext \
          pkg-config \
          libtool \
          libc6-dev \
          m4 \
          gawk \
          sed \
          cmake \
          rsync \
          subversion \
          texinfo \
          zlib1g-dev
        
        # 创建python2符号链接
        sudo ln -sf /usr/bin/python2.7 /usr/bin/python2
        echo "✅ 完整编译环境安装完成，包括Python2.7"

    - name: 克隆源码
      run: |
        if [ -d "$BUILD_DIR" ]; then
          echo "删除已存在的 $BUILD_DIR 目录"
          rm -rf "$BUILD_DIR"
        fi
        echo "开始克隆源码..."
        git clone --depth=1 --single-branch "$REPO_URL" "$BUILD_DIR"
        echo "✅ 源码克隆完成"

    - name: 更新软件源
      run: |
        if [ ! -d "$BUILD_DIR" ]; then
          echo "❌ 错误：$BUILD_DIR 目录不存在"
          exit 1
        fi
        cd "$BUILD_DIR"
        echo "开始更新软件源..."
        ./scripts/feeds update -a
        ./scripts/feeds install -a
        echo "✅ 软件源更新完成"

    - name: 创建主题目录结构
      run: |
        echo "创建主题目录结构..."
        mkdir -p "$BUILD_DIR/package/lean/dongzhai-theme/luci-theme-dongzhai/files/www/luci-static/dongzhai/css"
        mkdir -p "$BUILD_DIR/package/lean/dongzhai-theme/luci-theme-dongzhai/files/www/luci-static/dongzhai/js"
        echo "✅ 主题目录创建完成"

    - name: 创建主题Makefile
      run: |
        THEME_DIR="$BUILD_DIR/package/lean/dongzhai-theme/luci-theme-dongzhai"
        if [ ! -d "$THEME_DIR" ]; then
          echo "❌ 错误：主题目录不存在"
          exit 1
        fi
        
        cat > "$THEME_DIR/Makefile" << 'EOFMAKEFILE'
include $(TOPDIR)/rules.mk

LUCI_TITLE:=栋仔主题
LUCI_DEPENDS:=
PKG_VERSION:=1.0
PKG_RELEASE:=1

include $(INCLUDE_DIR)/package.mk

define Package/luci-theme-dongzhai
  $(call Package/luci/webtemplate)
  TITLE:=栋仔主题
  DEPENDS:=+luci-compat
endef

define Package/luci-theme-dongzhai/description
  栋仔个性化主题
endef

define Build/Configure
endef

define Build/Compile
endef

define Package/luci-theme-dongzhai/install
	$(INSTALL_DIR) $(1)/www/luci-static/dongzhai
	[ -d ./files ] && $(CP) ./files/* $(1)/www/luci-static/dongzhai/
endef

$(eval $(call BuildPackage,luci-theme-dongzhai))
EOFMAKEFILE
        echo "✅ 主题Makefile创建完成"

    - name: 创建主题CSS文件
      run: |
        CSS_DIR="$BUILD_DIR/package/lean/dongzhai-theme/luci-theme-dongzhai/files/www/luci-static/dongzhai/css"
        if [ ! -d "$CSS_DIR" ]; then
          echo "❌ 错误：CSS目录不存在"
          exit 1
        fi
        
        cat > "$CSS_DIR/style.css" << 'EOFCSS'
/* 栋仔主题样式 */
.header .fill .brand {
    color: #ff6600;
    font-weight: bold;
    font-size: 18px;
}
.sidebar {
    background: #2c3e50;
}
.sidebar .nav > li > a {
    color: #ecf0f1;
}
.btn-primary {
    background-color: #ff6600;
    border-color: #ff6600;
}
EOFCSS
        echo "✅ 主题CSS创建完成"

    - name: 应用配置和准备编译
      run: |
        if [ ! -d "$BUILD_DIR" ]; then
          echo "❌ 错误：$BUILD_DIR 目录不存在"
          exit 1
        fi
        
        cd "$BUILD_DIR"
        
        echo "复制配置文件..."
        if [ -f "../.config" ]; then
          cp "../.config" ".config"
          echo "✅ 配置文件复制完成"
        else
          echo "⚠️ 未找到外部配置文件，使用默认配置"
        fi
        
        echo "添加主题配置..."
        echo "CONFIG_PACKAGE_luci-theme-dongzhai=y" >> ".config"
        echo "CONFIG_DEFAULT_luci-theme-dongzhai=y" >> ".config"
        
        echo "添加编译优化配置..."
        {
          echo "# 空间优化"
          echo "CONFIG_KERNEL_KALLSYMS=n"
          echo "CONFIG_KERNEL_DEBUG_KERNEL=n"
          echo "CONFIG_KERNEL_DEBUG_INFO=n"
          echo "CONFIG_USE_STRIP=y"
          echo "CONFIG_USE_SSTRIP=n"
          echo "CONFIG_BUILD_NLS=n"
          echo "CONFIG_CLEAN_IPKG=y"
          echo "CONFIG_CCACHE=n"
          echo "# CONFIG_SDK is not set"
        } >> ".config"
        
        echo "应用默认配置..."
        make defconfig
        if [ $? -ne 0 ]; then
          echo "❌ 配置应用失败"
          exit 1
        fi
        echo "✅ 配置应用完成"

    - name: 编译前清理
      run: |
        echo "=== 编译前磁盘空间 ==="
        df -h
        sudo apt-get clean
        sudo rm -rf /var/lib/apt/lists/*
        sudo rm -rf /tmp/*
        echo "✅ 清理完成"

    - name: 下载软件包
      run: |
        cd "$BUILD_DIR"
        THREADS=${{ github.event.inputs.compile_threads }}
        echo "开始下载软件包（使用 $THREADS 线程）..."
        make download -j$THREADS
        echo "✅ 软件包下载完成"

    - name: 编译固件
      run: |
        cd "$BUILD_DIR"
        THREADS=${{ github.event.inputs.compile_threads }}
        echo "开始编译固件（使用 $THREADS 线程）..."
        
        # 分步编译提高稳定性
        echo "步骤1: 编译工具链..."
        make tools/compile -j$THREADS || make tools/compile -j1 V=s
        
        echo "步骤2: 编译工具..."
        make toolchain/compile -j$THREADS || make toolchain/compile -j1 V=s
        
        echo "步骤3: 最终编译..."
        make -j$THREADS || make -j1 V=s
        
        echo "✅ 编译流程完成"

    - name: 检查生成的文件
      run: |
        if [ ! -d "$BUILD_DIR" ]; then
          echo "❌ 错误：$BUILD_DIR 目录不存在"
          exit 1
        fi
        
        echo "🔍 查找生成的固件文件:"
        find "$BUILD_DIR/bin/targets/" -type f \( -name "*.bin" -o -name "*.img" -o -name "*.gz" \) 2>/dev/null | head -10
        
        if [ $? -eq 0 ]; then
          echo "✅ 固件文件生成成功"
        else
          echo "❌ 未找到固件文件"
        fi

    - name: 上传固件
      if: success()
      uses: actions/upload-artifact@v4
      with:
        name: openwrt-firmware
        path: ${{ env.BUILD_DIR }}/bin/targets/
        retention-days: 30

    - name: 完成提示
      if: always()
      run: |
        if [ "${{ job.status }}" == "success" ]; then
          echo "🎊 编译成功完成！"
          echo "📥 固件文件可在Artifacts区域下载"
        else
          echo "❌ 编译过程出现错误"
          echo "💡 请检查日志获取详细错误信息"
        fi
