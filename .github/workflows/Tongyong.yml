name: 通用OpenWrt编译工作流-修复版

on:
  workflow_dispatch:
    inputs:
      compile_threads:
        description: '编译线程数'
        required: false
        default: '1'
        type: choice
        options:
          - '1'
          - '2'

env:
  REPO_URL: https://github.com/coolsnowwolf/lede
  BUILD_DIR: lede

jobs:
  build:
    runs-on: ubuntu-22.04
    timeout-minutes: 360

    steps:
    - name: 检查代码和配置
      uses: actions/checkout@v4

    - name: 扩展磁盘空间
      run: |
        echo "=== 扩展磁盘空间 ==="
        sudo swapoff -a
        sudo dd if=/dev/zero of=/swapfile bs=1G count=4
        sudo chmod 600 /swapfile
        sudo mkswap /swapfile
        sudo swapon /swapfile
        echo "=== 当前磁盘和内存状态 ==="
        df -h
        free -h

    - name: 初始磁盘空间检查
      timeout-minutes: 15
      run: |
        echo "=== 初始磁盘空间状态 ==="
        df -h
        echo "开始清理系统缓存..."
        sudo apt-get clean
        sudo rm -rf /usr/local/lib/android /usr/share/dotnet /opt/ghc 2>/dev/null || true
        sudo rm -rf /usr/local/lib/node_modules 2>/dev/null || true
        sudo rm -rf /var/lib/apt/lists/*
        sudo rm -rf /tmp/*
        echo "=== 清理后磁盘空间 ==="
        df -h

    - name: 验证配置文件
      run: |
        if [ ! -f ".config" ]; then
          echo "❌ 错误：缺少配置文件 .config"
          echo "请在工作流运行前上传 .config 文件到仓库根目录"
          exit 1
        fi
        echo "✅ 找到配置文件"
        echo "=== 配置文件前几行预览 ==="
        head -20 .config

    - name: 安装完整编译环境
      timeout-minutes: 15
      run: |
        echo "安装完整编译环境..."
        sudo apt-get update
        sudo apt-get install -y \
          build-essential \
          git \
          libncurses5-dev \
          libssl-dev \
          python3 \
          python2.7 \
          unzip \
          wget \
          curl \
          gcc \
          g++ \
          binutils \
          patch \
          bzip2 \
          flex \
          make \
          autoconf \
          gettext \
          pkg-config \
          libtool \
          libc6-dev \
          m4 \
          gawk \
          sed \
          cmake
        echo "✅ 环境安装完成"
        sudo apt-get clean

    - name: 克隆源码
      timeout-minutes: 10
      run: |
        if [ -d "$BUILD_DIR" ]; then
          echo "删除已存在的 $BUILD_DIR 目录"
          rm -rf $BUILD_DIR
        fi
        echo "开始克隆源码..."
        git clone --depth=1 --single-branch $REPO_URL $BUILD_DIR
        if [ $? -ne 0 ]; then
          echo "❌ 源码克隆失败"
          exit 1
        fi
        echo "✅ 源码克隆完成"
        df -h

    - name: 更新软件源
      timeout-minutes: 10
      run: |
        if [ ! -d "$BUILD_DIR" ]; then
          echo "❌ 错误：$BUILD_DIR 目录不存在"
          exit 1
        fi
        echo "开始更新软件源..."
        cd $BUILD_DIR
        ./scripts/feeds update -a
        if [ $? -ne 0 ]; then
          echo "❌ 软件源更新失败"
          exit 1
        fi
        ./scripts/feeds install -a
        if [ $? -ne 0 ]; then
          echo "❌ 软件源安装失败"
          exit 1
        fi
        echo "✅ 软件源更新完成"

    - name: 创建主题目录结构
      run: |
        echo "创建主题目录结构..."
        mkdir -p "$BUILD_DIR/package/lean/dongzhai-theme/luci-theme-dongzhai/files/www/luci-static/dongzhai/css"
        mkdir -p "$BUILD_DIR/package/lean/dongzhai-theme/luci-theme-dongzhai/files/www/luci-static/dongzhai/js"
        echo "✅ 主题目录创建完成"

    - name: 创建主题Makefile
      run: |
        THEME_DIR="$BUILD_DIR/package/lean/dongzhai-theme/luci-theme-dongzhai"
        if [ ! -d "$THEME_DIR" ]; then
          echo "❌ 错误：主题目录不存在"
          exit 1
        fi
        
        cat > "$THEME_DIR/Makefile" << 'EOF'
include $(TOPDIR)/rules.mk

LUCI_TITLE:=栋仔主题
LUCI_DEPENDS:=
PKG_VERSION:=1.0
PKG_RELEASE:=1

include $(INCLUDE_DIR)/package.mk

define Package/luci-theme-dongzhai
  $(call Package/luci/webtemplate)
  TITLE:=栋仔主题
  DEPENDS:=+luci-compat
endef

define Package/luci-theme-dongzhai/description
  栋仔个性化主题
endef

define Build/Configure
endef

define Build/Compile
endef

define Package/luci-theme-dongzhai/install
	$(INSTALL_DIR) $(1)/www/luci-static/dongzhai
	[ -d ./files ] && $(CP) ./files/* $(1)/www/luci-static/dongzhai/
endef

$(eval $(call BuildPackage,luci-theme-dongzhai))
EOF
        echo "✅ 主题Makefile创建完成"

    - name: 创建主题CSS文件
      run: |
        CSS_DIR="$BUILD_DIR/package/lean/dongzhai-theme/luci-theme-dongzhai/files/www/luci-static/dongzhai/css"
        if [ ! -d "$CSS_DIR" ]; then
          echo "❌ 错误：CSS目录不存在"
          exit 1
        fi
        
        cat > "$CSS_DIR/style.css" << 'EOF'
/* 栋仔主题样式 */
.header .fill .brand {
    color: #ff6600;
    font-weight: bold;
    font-size: 18px;
}
.sidebar {
    background: #2c3e50;
}
.sidebar .nav > li > a {
    color: #ecf0f1;
}
.btn-primary {
    background-color: #ff6600;
    border-color: #ff6600;
}
EOF
        echo "✅ 主题CSS创建完成"

    - name: 应用配置和准备编译
      timeout-minutes: 10
      run: |
        if [ ! -d "$BUILD_DIR" ]; then
          echo "❌ 错误：$BUILD_DIR 目录不存在"
          exit 1
        fi
        
        cd $BUILD_DIR
        
        echo "复制配置文件..."
        if [ -f "../.config" ]; then
          cp ../.config .config
          echo "✅ 配置文件复制完成"
        else
          echo "⚠️ 未找到外部配置文件，使用默认配置"
        fi
        
        echo "添加主题配置..."
        echo "CONFIG_PACKAGE_luci-theme-dongzhai=y" >> .config
        echo "CONFIG_DEFAULT_luci-theme-dongzhai=y" >> .config
        
        echo "添加编译优化配置..."
        cat >> .config << 'EOF'
# 空间优化
CONFIG_KERNEL_KALLSYMS=n
CONFIG_KERNEL_DEBUG_KERNEL=n
CONFIG_KERNEL_DEBUG_INFO=n
CONFIG_USE_STRIP=y
CONFIG_USE_SSTRIP=n
CONFIG_BUILD_NLS=n
CONFIG_CLEAN_IPKG=y
CONFIG_CCACHE=n
# CONFIG_SDK is not set
EOF
        
        echo "应用默认配置..."
        make defconfig
        if [ $? -ne 0 ]; then
          echo "❌ 配置应用失败"
          exit 1
        fi
        echo "✅ 配置应用完成"

    - name: 编译前最终清理
      timeout-minutes: 5
      run: |
        echo "=== 编译前磁盘空间 ==="
        df -h
        echo "执行最终清理..."
        
        # 清理系统缓存
        sudo apt-get clean
        sudo rm -rf /var/cache/apt/archives/*
        sudo rm -rf /tmp/*
        
        # 移除.git目录
        if [ -d "$BUILD_DIR/.git" ]; then
          echo "移除.git目录节省空间..."
          rm -rf "$BUILD_DIR/.git"
        fi
        
        # 移除feeds目录中的.git
        find "$BUILD_DIR/feeds" -name ".git" -type d -exec rm -rf {} + 2>/dev/null || true
        
        echo "=== 最终磁盘空间 ==="
        df -h

    - name: 下载软件包
      timeout-minutes: 20
      run: |
        if [ ! -d "$BUILD_DIR" ]; then
          echo "❌ 错误：$BUILD_DIR 目录不存在"
          exit 1
        fi
        
        cd $BUILD_DIR
        THREADS=${{ github.event.inputs.compile_threads }}
        
        echo "开始下载软件包（使用 $THREADS 线程）..."
        for i in {1..3}; do
          echo "第 $i 次尝试下载..."
          if make download -j$THREADS; then
            echo "✅ 软件包下载完成"
            break
          else
            echo "⚠️ 第 $i 次下载失败，重试..."
            sleep 5
          fi
        done
        
        if [ $? -ne 0 ]; then
          echo "❌ 软件包下载失败"
          exit 1
        fi

    - name: 编译固件
      timeout-minutes: 300
      run: |
        if [ ! -d "$BUILD_DIR" ]; then
          echo "❌ 错误：$BUILD_DIR 目录不存在"
          exit 1
        fi
        
        cd $BUILD_DIR
        THREADS=${{ github.event.inputs.compile_threads }}
        
        echo "开始编译固件..."
        echo "=== 当前磁盘空间 ==="
        df -h
        echo "=== 内存使用情况 ==="
        free -h
        
        echo "🔧 使用 $THREADS 线程编译..."
        
        # 分步编译，提高稳定性
        echo "步骤1: 编译工具链..."
        if make tools/install -j$THREADS; then
          echo "✅ 工具链编译完成"
        else
          echo "❌ 工具链编译失败"
          exit 1
        fi
        
        echo "步骤2: 编译工具..."
        if make toolchain/install -j$THREADS; then
          echo "✅ 工具编译完成"
        else
          echo "❌ 工具编译失败"
          exit 1
        fi
        
        echo "步骤3: 编译目标..."
        if make target/install -j$THREADS; then
          echo "✅ 目标编译完成"
        else
          echo "❌ 目标编译失败"
          exit 1
        fi
        
        echo "步骤4: 最终编译..."
        if make -j$THREADS V=s; then
          echo "🎉 编译成功！"
        else
          echo "❌ 最终编译失败"
          # 输出错误日志
          find . -name "*.log" -exec tail -50 {} \; 2>/dev/null || true
          exit 1
        fi

    - name: 检查生成的文件
      run: |
        if [ ! -d "$BUILD_DIR" ]; then
          echo "❌ 错误：$BUILD_DIR 目录不存在"
          exit 1
        fi
        
        echo "🔍 查找生成的固件文件:"
        find "$BUILD_DIR/bin/targets/" -type f \( -name "*.bin" -o -name "*.img" -o -name "*.gz" \) 2>/dev/null | head -10
        
        echo "=== 文件大小统计 ==="
        du -sh "$BUILD_DIR/bin/targets/" || true
        echo "=== 最终磁盘空间 ==="
        df -h

    - name: 上传固件文件
      if: success()
      uses: actions/upload-artifact@v4
      with:
        name: openwrt-firmware
        path: |
          ${{ env.BUILD_DIR }}/bin/targets/**/*.bin
          ${{ env.BUILD_DIR }}/bin/targets/**/*.img
          ${{ env.BUILD_DIR }}/bin/targets/**/*.gz
        retention-days: 30

    - name: 完成提示
      if: always()
      run: |
        if [ "${{ job.status }}" == "success" ]; then
          echo "🎊 编译成功完成！"
          echo "📥 固件文件可在Artifacts区域下载"
        else
          echo "❌ 编译过程出现错误"
          echo "💡 请检查日志获取详细错误信息"
        fi
