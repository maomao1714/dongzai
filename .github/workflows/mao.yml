name: 栋仔主题编译优化版22

on:
  workflow_dispatch:
    inputs:
      compile_threads:
        description: '编译线程数'
        required: false
        default: '1'
        type: choice
        options:
          - '1'
          - '2'

env:
  REPO_URL: https://github.com/coolsnowwolf/lede
  BUILD_DIR: lede

jobs:
  build:
    runs-on: ubuntu-22.04
    timeout-minutes: 360

    steps:
    - name: 检查代码和配置
      uses: actions/checkout@v4

    - name: 初始磁盘空间检查
      timeout-minutes: 15
      run: |
        echo "=== 初始磁盘空间检查开始 ==="
        echo "设置15分钟超时，包含假死检测机制"
        
        # 创建后台进程监控假死状态
        {
          while true; do
            echo "[$(date +%H:%M:%S)] 磁盘检查进程运行中..."
            sleep 30
          done
        } &
        MONITOR_PID=$!
        
        # 设置假死检测函数
        cleanup() {
          echo "检测到超时或假死，终止进程..."
          kill $MONITOR_PID 2>/dev/null || true
          exit 1
        }
        trap cleanup TERM INT
        
        echo "=== 初始磁盘空间状态 ==="
        df -h
        
        echo "开始清理系统缓存..."
        # 使用后台任务并行执行清理操作
        (sudo apt-get clean > /dev/null 2>&1) &
        CLEAN_PID1=$!
        
        (sudo rm -rf /usr/local/lib/android /usr/share/dotnet /opt/ghc 2>/dev/null || true) &
        CLEAN_PID2=$!
        
        (sudo rm -rf /usr/local/lib/node_modules 2>/dev/null || true) &
        CLEAN_PID3=$!
        
        # 等待所有清理任务完成
        wait $CLEAN_PID1 $CLEAN_PID2 $CLEAN_PID3
        
        echo "缓存清理完成"
        echo "=== 清理后磁盘空间 ==="
        df -h
        
        # 终止监控进程
        kill $MONITOR_PID 2>/dev/null || true
        echo "✅ 磁盘空间检查完成"

    - name: 验证配置文件
      run: |
        if [ ! -f ".config" ]; then
          echo "❌ 错误：缺少配置文件 .config"
          exit 1
        fi
        echo "✅ 找到配置文件"

    - name: 安装编译环境
      timeout-minutes: 10
      run: |
        echo "安装编译环境..."
        sudo apt-get update
        sudo apt-get install -y build-essential git libncurses5-dev libssl-dev python3 unzip wget curl
        echo "✅ 环境安装完成"
        sudo apt-get clean
        sudo rm -rf /var/lib/apt/lists/*

    - name: 克隆源码
      timeout-minutes: 5
      run: |
        if [ -d "$BUILD_DIR" ]; then
          echo "删除已存在的 $BUILD_DIR 目录"
          rm -rf $BUILD_DIR
        fi
        echo "开始克隆源码..."
        git clone --depth=1 $REPO_URL $BUILD_DIR
        echo "✅ 源码克隆完成"
        df -h

    - name: 更新软件源
      timeout-minutes: 5
      run: |
        if [ ! -d "$BUILD_DIR" ]; then
          echo "❌ 错误：$BUILD_DIR 目录不存在"
          exit 1
        fi
        echo "开始更新软件源..."
        $BUILD_DIR/scripts/feeds update -a > /dev/null 2>&1
        $BUILD_DIR/scripts/feeds install -a > /dev/null 2>&1
        echo "✅ 软件源更新完成"

    - name: 处理Node.js问题
      run: |
        if [ ! -d "$BUILD_DIR" ]; then
          echo "❌ 错误：$BUILD_DIR 目录不存在"
          exit 1
        fi
        echo "处理Node.js问题..."
        if [ -d "$BUILD_DIR/feeds/packages/lang/node" ]; then
          rm -rf "$BUILD_DIR/feeds/packages/lang/node"
        fi
        mkdir -p "$BUILD_DIR/feeds/packages/lang/node"
        echo "✅ Node.js处理完成"

    - name: 创建主题目录
      run: |
        mkdir -p "$BUILD_DIR/package/lean/dongzhai-theme/luci-theme-dongzhai/files/www/luci-static/dongzhai/css"
        echo "✅ 主题目录创建完成"

    - name: 创建主题Makefile
      run: |
        THEME_DIR="$BUILD_DIR/package/lean/dongzhai-theme/luci-theme-dongzhai"
        if [ ! -d "$THEME_DIR" ]; then
          echo "❌ 错误：主题目录不存在"
          exit 1
        fi
        
        # 使用echo命令创建Makefile，避免heredoc问题
        echo "include \$(TOPDIR)/rules.mk" > "$THEME_DIR/Makefile"
        echo "" >> "$THEME_DIR/Makefile"
        echo "LUCI_TITLE:=栋仔主题" >> "$THEME_DIR/Makefile"
        echo "LUCI_DEPENDS:=" >> "$THEME_DIR/Makefile"
        echo "PKG_VERSION:=1.0" >> "$THEME_DIR/Makefile"
        echo "PKG_RELEASE:=1" >> "$THEME_DIR/Makefile"
        echo "" >> "$THEME_DIR/Makefile"
        echo "include \$(INCLUDE_DIR)/package.mk" >> "$THEME_DIR/Makefile"
        echo "" >> "$THEME_DIR/Makefile"
        echo "define Package/luci-theme-dongzhai" >> "$THEME_DIR/Makefile"
        echo "  \$(call Package/luci/webtemplate)" >> "$THEME_DIR/Makefile"
        echo "  TITLE:=栋仔主题" >> "$THEME_DIR/Makefile"
        echo "  DEPENDS:=+luci-compat" >> "$THEME_DIR/Makefile"
        echo "endef" >> "$THEME_DIR/Makefile"
        echo "" >> "$THEME_DIR/Makefile"
        echo "define Package/luci-theme-dongzhai/description" >> "$THEME_DIR/Makefile"
        echo "  栋仔个性化主题" >> "$THEME_DIR/Makefile"
        echo "endef" >> "$THEME_DIR/Makefile"
        echo "" >> "$THEME_DIR/Makefile"
        echo "define Build/Configure" >> "$THEME_DIR/Makefile"
        echo "endef" >> "$THEME_DIR/Makefile"
        echo "" >> "$THEME_DIR/Makefile"
        echo "define Build/Compile" >> "$THEME_DIR/Makefile"
        echo "endef" >> "$THEME_DIR/Makefile"
        echo "" >> "$THEME_DIR/Makefile
